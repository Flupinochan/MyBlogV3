openapi: "3.0.1"
info:
  title: "MyBlogV3"
  version: "2025-04-19T03:02:55Z"
servers:
- url: "https://49hzt8zwx0.execute-api.ap-northeast-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "prod"
paths:
  /blog-version/{proxy+}:
    options:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
        type: "mock"
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:247574246160:function:amplify-amplifyvitereactt-blogversionamplifylambda-pm1sWOC18X7c/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
  /contact/{proxy+}:
    options:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
        type: "mock"
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:247574246160:function:amplify-amplifyvitereactt-contactseslambdaD221AF81-zWvFjLXhUnMJ/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
  /blog-version:
    get:
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogVersionResponseModel"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogVersionResponseModel"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:247574246160:function:amplify-amplifyvitereactt-blogversionamplifylambda-pm1sWOC18X7c/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /contact:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactRequestModel"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactResponseModel"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactResponseModel"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:247574246160:function:amplify-amplifyvitereactt-contactseslambdaD221AF81-zWvFjLXhUnMJ/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /:
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    ContactRequestModel:
      required:
      - "email"
      - "message"
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
        message:
          type: "string"
        email:
          type: "string"
    BlogVersionResponseModel:
      type: "object"
      additionalProperties:
        type: "object"
        properties:
          fqdn:
            type: "string"
          updateTime:
            type: "string"
    ContactResponseModel:
      required:
      - "message"
      type: "object"
      properties:
        message:
          type: "string"
