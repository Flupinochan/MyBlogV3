openapi: "3.0.1"
info:
  title: "MyBlogAPI"
  version: "2024-06-10T14:30:30Z"
servers:
- url: "https://neck7jc1cb.execute-api.us-west-2.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "api"
paths:
  /getkb:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/lambdagetkbrequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/lambdagetkbresponse"
      x-amazon-apigateway-request-validator: "requestValidatePost"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:GetKB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_templates"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
  /textgen:
    get:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:GenIMG/invocations"
        passthroughBehavior: "when_no_match"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/lambdagentextrequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/lambdagentextresponse"
      x-amazon-apigateway-request-validator: "requestValidatePost"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:GenText/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_templates"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
  /imagegen:
    get:
      parameters:
      - name: "negative_prompt"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "positive_prompt"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: "requestValidateGet"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:GenIMG/invocations"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"positive_prompt\":\"$util.escapeJavaScript($input.params('positive_prompt'))\"\
            ,\"negative_prompt\":\"$util.escapeJavaScript($input.params('negative_prompt'))\"\
            }"
        passthroughBehavior: "when_no_match"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/lambdagenimgrequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/lambdagenimgresponse"
      x-amazon-apigateway-request-validator: "requestValidatePost"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:GenIMG/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_templates"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
  /ses:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/lambdases"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: "requestValidatePost"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:SES/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_templates"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
  /movieupload:
    get:
      parameters:
      - name: "file_name"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: "requestValidateGet"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:247574246160:function:GenGiziUpload/invocations"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"file_name\":\"$util.escapeJavaScript($input.params('file_name'))\"\
            }"
        passthroughBehavior: "when_no_match"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
  /checksync:
    post:
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        type: "aws"
        credentials: "arn:aws:iam::247574246160:role/Sync-GetKB-ApiGateway"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:states:action/DescribeExecution"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"input\":\"$util.escapeJavaScript($input.json('$'))\"\
            ,\"executionArn\":\"$util.escapeJavaScript($input.path('$.executionArn'))\"\
            }"
        passthroughBehavior: "when_no_templates"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
  /execsync:
    post:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        type: "aws"
        credentials: "arn:aws:iam::247574246160:role/Sync-GetKB-ApiGateway"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:states:action/StartExecution"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"input\":\"$util.escapeJavaScript($input.json('$'))\"\
            ,\"stateMachineArn\":\"arn:aws:states:us-west-2:247574246160:stateMachine:Sync-KnowledgeBase-Standard\"\
            }"
        passthroughBehavior: "when_no_templates"
    options:
      responses:
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: "when_no_match"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    lambdagentextresponse:
      title: "lambdagentextresponse"
      type: "object"
      properties:
        text:
          type: "string"
        statusCode:
          type: "number"
    lambdagenimgresponse:
      title: "lambdagenimgresponse"
      type: "object"
      properties:
        image:
          type: "string"
    lambdagentextrequest:
      title: "lambdagentextrequest"
      type: "object"
      properties:
        positive_prompt:
          type: "string"
    lambdagenimgrequest:
      title: "lambdagenimgrequest"
      type: "object"
      properties:
        size:
          type: "number"
        negative_prompt:
          type: "string"
        positive_prompt:
          type: "string"
        steps:
          type: "number"
        cfg_scale:
          type: "number"
    lambdagetkbrequest:
      title: "lambdagetkbrequest"
      type: "object"
      properties:
        input_prompt:
          type: "string"
        mime_type:
          type: "string"
        operation:
          type: "string"
    lambdases:
      title: "lambdases"
      type: "object"
      properties:
        name:
          type: "string"
        message:
          type: "string"
        email:
          type: "string"
    lambdagetkbresponse:
      title: "lambdagetkbresponse"
      type: "object"
      properties:
        s3FileName:
          type: "string"
        text:
          type: "string"
        statusCode:
          type: "number"
x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
  - Effect: "Deny"
    Principal: "*"
    Action: "execute-api:Invoke"
    Resource: "*"
    Condition:
      StringNotEquals:
        aws:Referer: "validate-cfn"
  - Effect: "Allow"
    Principal: "*"
    Action: "execute-api:Invoke"
    Resource: "*"
x-amazon-apigateway-request-validators:
  requestValidatePost:
    validateRequestParameters: false
    validateRequestBody: true
  requestValidateGet:
    validateRequestParameters: true
    validateRequestBody: false
